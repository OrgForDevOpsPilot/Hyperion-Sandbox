# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# パイプライン変数の定義
variables:
  deploymentDefaultLocation: 'japaneast'
  buildConfiguration: 'Release'
  ServiceConnectionName: 'avanadeosadatest_Tenant_Connection'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Hello
    jobs:
    - job: osadatest01
      displayName: 'osadatest01'
      steps:
      - script: echo Hello, world!
        displayName: 'Run a one-line script'
      - script: |
          echo Add other tasks to build, test, and deploy your project.
          echo See https://aka.ms/yaml
        displayName: 'Run a multi-line script'

# ビルド
  - stage: Build
    jobs:
    - job: Build
      displayName: 'Build'
      steps:
        # .NETプロジェクトのビルドを実行
        - script: |
            cd webapp/webapp
            dotnet build --configuration $(buildConfiguration)
          displayName: 'dotnet build $(buildConfiguration)'      # タスクの表示名

# ビルド
  - stage: UnitTest
    jobs:
    - job: UnitTest
      displayName: 'UnitTest'
      steps:
        # .NETプロジェクトのビルドを実行
        - script: |
            cd webapp/webapp
            dotnet build --configuration $(buildConfiguration)
          displayName: 'dotnet build $(buildConfiguration)'
        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests - $(buildConfiguration)'
          inputs:
            command: 'test'
            arguments: '--no-build --configuration $(buildConfiguration)'
            publishTestResults: true
            projects: '**/*.Test.csproj'


# ビルド成果物のパッケージングと公開
  - stage: PackageAndPublishArtifact
    jobs:
    - job: PackageAndPublishArtifact
      displayName: 'PackageAndPublishArtifact'
      steps:
        # .NETプロジェクトのパブリッシュを実行
        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            publishWebProjects: true                             # Webプロジェクトをパブリッシュ
            projects: '**/*.csproj'                              # プロジェクトファイルのパス
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

# デプロイ
  - stage: DeployToStaging
    jobs:
    - job: DeployToStaging
      displayName: 'DeployToStaging'
      steps:
        # Azure Web Appへのデプロイを実行
        - task: AzureWebApp@1
          inputs:
            azureSubscription: $(ServiceConnectionName)           # Azureサービス接続名
            appType: 'webAppLinux'                                # アプリケーションタイプ
            appName: 'asp-az400-book'                       # アプリケーション名
            package: '$(Build.ArtifactStagingDirectory)/**/*.zip' # デプロイパッケージ
