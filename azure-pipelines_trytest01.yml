trigger:
- main

variables:
  deploymentDefaultLocation: 'japaneast'
  buildConfiguration: 'Release'
  ServiceConnectionName: 'avanadeosadatest_Tenant_Connection'
  dotnetSdkVersion: '6.x'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'

pool:
  vmImage: ubuntu-latest

stages:
# Prepare
  - stage: 'Prepare'
    jobs:
    - job: HelloWorldJob
      displayName: 'Hello World Job'
      steps:
      - script: echo Hello, world!
        displayName: 'Run a one-line script'
      - script: |
          echo Add other tasks to build, test, and deploy your project.
          echo See https://aka.ms/yaml
        displayName: 'Run a multi-line script'

# Build
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs:
    - job: BuildJob
      displayName: 'Build Job'
      steps:
#        # .NETプロジェクトのビルドを実行
#        - script: |
#            cd webapp/webapp
#            dotnet build --configuration $(buildConfiguration)
#          displayName: 'dotnet build $(buildConfiguration)'      # タスクの表示名
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            projects: 'webapp/webtest/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
            command: 'build'
            arguments: '--no-restore --configuration $(buildConfiguration)'
            projects: 'webapp/webtest/*.csproj'

    - job: UnitTestJob
      displayName: 'UnitTest Job'
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests - $(buildConfiguration)'
          inputs:
            command: 'test'
            arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
            publishTestResults: true
            projects: 'webapp/webtest/webtest.csproj'

        - task: PowerShell@2
          displayName: 'Install ReportGenerator Code Coverage  Tool'
          inputs:
            targetType: 'inline'
            script: |
              dotnet tool install --global dotnet-reportgenerator-globaltool

        - task: PowerShell@2
          displayName: 'Execute ReportGenerator Code Coverage Command'
          inputs:
            targetType: 'inline'
            script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'

        - task: PublishCodeCoverageResults@2
          displayName: 'Public Code Coverage Results'
          inputs:
#            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

#  - stage: 'Analyze'
#    jobs:
#    - job: AnalyzeJob
#      displayName: 'Analyze Job'
#      steps:
#        - task: NuGetToolInstaller@1
#
#        - task: NuGetCommand@2
#          inputs:
#            restoreSolution: '$(solution)'
#
#        - task: SonarCloudPrepare@1
#          inputs:
#            SonarCloud: 'sonarcloud'
#            organization: 'devopssimaoh'
#            scannerMode: 'MSBuild'
#            projectKey: 'DevOpsSimaOH_PartsUnlimited'
#            projectName: 'PartsUnlimited'
#
#        - task: VSBuild@1
#          inputs:
#            solution: '$(solution)'
#            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#            platform: '$(buildPlatform)'
#            configuration: '$(buildConfiguration)'
#
#        - task: SonarCloudAnalyze@1
#
#        - task: SonarCloudPublish@1
#          inputs:
#            pollingTimeoutSec: '300'

  - stage: 'Publish'
    jobs:
    - job: PublishJob
      displayName: 'Publish Job'
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

    - job: SaveToArtifactJob
      displayName: 'SaveToArtifact Job'
      steps:
        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

  - stage: 'DeployToDev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Publish
    condition:  succeeded()
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                appType: 'webAppLinux'
                appName: 'asp-az400-book'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/webapp.zip'
# ビルド
#  - stage: UnitTest
#    jobs:
#    - job: UnitTest
#      displayName: 'UnitTest'
#      steps:
#        # .NETプロジェクトのビルドを実行
#        - script: |
#            cd webapp/webtest
#            dotnet build --configuration $(buildConfiguration)
#          displayName: 'dotnet build $(buildConfiguration)'
##        - task: DotNetCoreCLI@2
##          displayName: 'Run unit tests - $(buildConfiguration)'
##          inputs:
##            command: 'test'
##            arguments: '--no-build --configuration $(buildConfiguration)'
##            publishTestResults: true
##            projects: '**/*.Test.csproj'
#        - script: |
#            cd webapp/webtest
#            dotnet test --configuration $(buildConfiguration) --no-build --logger trx
#          displayName: 'unit test'

## ビルド成果物のパッケージングと公開
#  - stage: PackageAndPublishArtifact
#    jobs:
#    - job: PackageAndPublishArtifact
#      displayName: 'PackageAndPublishArtifact'
#      steps:
#        # .NETプロジェクトのパブリッシュを実行
#        - task: DotNetCoreCLI@2
#          inputs:
#            command: 'publish'
#            publishWebProjects: true                             # Webプロジェクトをパブリッシュ
#            projects: '**/*.csproj'                              # プロジェクトファイルのパス
#            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

## デプロイ
#  - stage: DeployToStaging
#    jobs:
#    - job: DeployToStaging
#      displayName: 'DeployToStaging'
#      steps:
#        # Azure Web Appへのデプロイを実行
#       - task: AzureWebApp@1
#          inputs:
#            azureSubscription: $(ServiceConnectionName)           # Azureサービス接続名
#            appType: 'webAppLinux'                                # アプリケーションタイプ
#            appName: 'asp-az400-book'                       # アプリケーション名
#            package: '$(Build.ArtifactStagingDirectory)/**/*.zip' # デプロイパッケージ
