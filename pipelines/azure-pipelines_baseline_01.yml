trigger:
- none

variables:
  deploymentDefaultLocation: 'japaneast'
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.x'
  solution: '**/*.sln'
  unitTestProjects: '**/*.UnitTests/*.csproj'
  integrationTestProjects: '**/*.IntegrationTests/*.csproj'
  targetProjects: '**/DemoSite/*.csproj'
  ServiceConnectionName: 'avanadeosadatest_Tenant_Connection'

pool:
  vmImage: ubuntu-latest

stages:
# # Analyze
#   - stage: 'Analyze'
#     jobs:
#     - job: AnalyzeJob
#       displayName: 'Analyze Job'
#       steps:
#         - task: NuGetToolInstaller@1

#         - task: NuGetCommand@2
#           inputs:
#             restoreSolution: '$(solution)'

#         - task: SonarCloudPrepare@1
#           inputs:
#             SonarCloud: 'SonarCloud-Connection'
#             organization: 'az400-book'
#             scannerMode: 'MSBuild'
#             projectKey: 'freeplanets_Hyperion'
#             projectName: 'Hyperion'

#         - task: DotNetCoreCLI@2
#           inputs:
#             command: 'build'
#             projects: $(targetProjects)
#             arguments: '--configuration $(buildConfiguration)'

#         - task: SonarCloudAnalyze@1

#         - task: SonarCloudPublish@1
#           inputs:
#             pollingTimeoutSec: '300'

  # Build
  - stage: 'Build'
    # dependsOn: Analyze
    # condition:  succeeded()
    displayName: 'Build the web application'
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK $(dotnetSdkVersion)'
            inputs:
              version: '$(dotnetSdkVersion)'
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions

          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: 'restore'
              projects: $(unitTestProjects)

          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)'
            inputs:
              command: 'build'
              projects: $(unitTestProjects)
              arguments: '--no-restore --configuration $(buildConfiguration)'

  # Unit Test
  - stage: 'Test'
    displayName: 'Unit test the application'
    dependsOn: Build
    condition:  succeeded()
    jobs:
      - job: UnitTestJob
        displayName: 'UnitTest Job'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Execute unit test'
            inputs:
              command: test
              projects: $(unitTestProjects)
              arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
              publishTestResults: true

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  # Publish
  - stage: 'Publish'
    dependsOn: Test
    condition:  succeeded()
    jobs:
    - job: PublishJob
      displayName: 'Publish Job'
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: $(targetProjects)
            publishWebProjects: false
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

  # DeployToDev
  - stage: 'DeployToDev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Publish
    condition:  succeeded()
    jobs:
    - deployment: DeployToDevJob
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                appType: 'webAppLinux'
                appName: '$(WebAppNameDev)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

  # DeployToStaging
  - stage: 'DeployToStaging'
    displayName: 'Deploy to the staging environment'
    dependsOn: DeployToDev
    condition:  succeeded()
    jobs:
    - deployment: DeployToStagingJob
      pool:
        vmImage: 'ubuntu-20.04'
      environment: staging
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                appType: 'webAppLinux'
                appName: '$(WebAppNameStg)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
