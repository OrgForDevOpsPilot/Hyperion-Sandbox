trigger:
- none

variables:
  deploymentDefaultLocation: 'japaneast'
  buildConfiguration: 'Release'
  ServiceConnectionName: 'avanadeosadatest_Tenant_Connection'
  dotnetSdkVersion: '6.x'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'

pool:
  name: Default

stages:
  - stage: 'Analyze'
    jobs:
    - job: AnalyzeJob
      displayName: 'Analyze Job'
      steps:
#        - bash: 'wget --no-check-certificate -c --header "Cookie: oraclelicense=accept-securebackup-cookie" https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz '
#          displayName: 'Bash Script'

#        - script: |
#            "C:\Program Files\Git\bin\bash.exe" -c "curl -L --insecure -b 'oraclelicense=accept-securebackup-cookie' https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz -o $(Build.SourcesDirectory)\\\\jdk-21_linux-x64_bin.tar.gz"
#          displayName: 'Download JDK 21 with Bash'

#        - script: |
#            "C:\Program Files\Git\bin\bash.exe" -c "curl -L --insecure -b 'oraclelicense=accept-securebackup-cookie' https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz -o '$(Build.SourcesDirectory)/jdk-21_linux-x64_bin.tar.gz'"
#          displayName: 'Download JDK 21 with Bash'

#        - task: JavaToolInstaller@0
#          displayName: 'Use Java 21'
#          inputs:
#            versionSpec: 21
#            jdkArchitectureOption: x64
#            jdkSourceOption: LocalDirectory
#            jdkFile: '$(build.SourcesDirectory)/jdk-21_linux-x64_bin.tar.gz'
#            jdkDestinationDirectory: '$(agent.toolsDirectory)/jdk21'

#        - script: |
#            echo "##vso[task.setvariable variable=JAVA_HOME]$(Agent.ToolsDirectory)/jdk21/jdk-21.0.3"
#          displayName: 'Set JAVA_HOME'

#        - task: UseDotNet@2
#          displayName: 'Use .NET 6.x'
#          inputs:
#            version: 6.x
#            includePreviewVersions: true
#        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'SonarCloud-Connection'
            organization: 'az400-book'
            scannerMode: 'MSBuild'
            projectKey: 'freeplanets_Hyperion'
            projectName: 'Hyperion'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: SonarCloudAnalyze@1

        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '300'

# Build
  - stage: 'Build'
#    dependsOn: Analyze
#    condition:  succeeded()
    displayName: 'Build the web application'
    jobs:
    - job: BuildJob
      displayName: 'Build Job'
      steps:
        - script: |
            cd webapp/webapp
            dotnet build --configuration $(buildConfiguration)
          displayName: 'dotnet build $(buildConfiguration)'

    - job: UnitTestJob
      dependsOn: BuildJob
      condition: succeeded()
      displayName: 'UnitTest Job'
      steps:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            projects: 'webapp/webtest/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
            command: 'build'
            arguments: '--no-restore --configuration $(buildConfiguration)'
            projects: 'webapp/webtest/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests - $(buildConfiguration)'
          inputs:
            command: 'test'
            arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
            publishTestResults: true
            projects: 'webapp/webtest/webtest.csproj'

        - task: PowerShell@2
          displayName: 'Install ReportGenerator Code Coverage  Tool'
          inputs:
            targetType: 'inline'
            script: |
              dotnet tool install --globalÂ dotnet-reportgenerator-globaltool

        - task: PowerShell@2
          displayName: 'Execute ReportGenerator Code Coverage Command'
          inputs:
            targetType: 'inline'
            script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'

        - task: PublishCodeCoverageResults@2
          displayName: 'Public Code Coverage Results'
          inputs:
#            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

  - stage: 'Publish'
    dependsOn: Build
    condition:  succeeded()
    jobs:
    - job: PublishJob
      displayName: 'Publish Job'
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

  - stage: 'DeployToDev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Publish
    condition:  succeeded()
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                appType: 'webAppLinux'
                appName: 'asp-az400-book'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/webapp.zip'
